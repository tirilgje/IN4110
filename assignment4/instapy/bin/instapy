#!/usr/bin/env python

import argparse
import os.path

from instapy import grayscale_image
from instapy import sepia_image




parser = argparse.ArgumentParser(description='Instapy user interface')



def checkFile(f):
    """
    Checks if a file exists and if it has a valid extension. 
    Gives an error if it does not.

    -----------------------------------------
    Args:
        f (str): A filename to be checked.
    Returns:
        f (str): Returns the filename if the corresponding file exists
            and has a valid extension.

    -----------------------------------------
    """
    # The extensions below does not represent every format
    # supported by cv2.imread() - but the most common ones.
    ext = ('.jpg', '.jpeg', '.png', '.pic')
    if not os.path.isfile(f):
        parser.error('The file you are trying to filter or rescale does not exist.')
    if not f.lower().endswith(ext):
        parser.error('The file has an invalid extension. These are the valid ones: {}'.format(ext))
    return f


# Added a mutually exclusive group to be used with grayscale- and sepia-flags.
group = parser.add_mutually_exclusive_group()

parser.add_argument('-f','--file',
                   metavar='FILE',
                   required=True,
                   type=lambda input:checkFile(input),
                   help='The filename of file to apply filter to')

# -se --sepia select sepia
group.add_argument('-se', '--sepia',
                    action='store_true',
                    help='Select sepia filter')

# -g --gray select gray
group.add_argument('-g', '--gray',
                    action='store_true',
                    help='Select gray filter')

# -sc --scale scale factor
parser.add_argument('-sc', '--scale',
                    type=float,
                    metavar = 'scaling-grade',
                    default=1.0,
                    help='Scale factor to resize image (default=1.0)')

# -sc --scale scale factor
parser.add_argument('-l', '--level',
                    type=float,
                    metavar = 'level-of-sepia',
                    default=1.0,
                    help='Level of sepia, float between 0 and 1 (default=1.0)')

# -i --implementation select implementation
parser.add_argument('-i', '--implementation',
                    type=str,
                    metavar='{python, numpy, numba, cython}',
                    default='numpy',
                    choices={'python', 'numpy', 'numba'},
                    help='Choose the implementation, {python, numpy, numba} (default=numpy)')

# -o --out add output filename
parser.add_argument('-o', '--out',
                    metavar='OUT',
                    type=str,
                    default=None,
                    help='The output filename')


parser.add_argument('-r', '--runtime',
                    action='store_true',
                    help='Track runtime spent on task (default=False)')


args = parser.parse_args()


if args.gray:
    grayscale_image(input_filename=args.file,
                    output_filename=args.out,
                    scale=args.scale,
                    implementation=args.implementation,
                    timing_on=args.runtime)

elif args.sepia:
    sepia_image(input_filename=args.file,
                output_filename=args.out,
                scale=args.scale,
                level=args.level,
                implementation=args.implementation,
                timing_on=args.runtime)
else:
    print('Must choose [-se] og [-g] for filter')
